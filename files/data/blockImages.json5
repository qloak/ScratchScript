{
    "data": {
        // MOTION
        movesteps: 'move () steps',
        turnright: 'turn right () degrees',
        turnleft: 'turn left () degrees',
        goto: 'go to ( v)',
        gotoxy: 'go to x: () y: ()',
        glidesecsto: 'glide () secs to ( v)',
        glidesecstoxy: 'glide () secs to x: () y: ()',
        pointindirection: 'point in direction ()',
        pointtowards: 'point towards ( v)',
        changex: 'change x by ()',
        setx: 'set x to ()',
        changey: 'change y by ()',
        sety: 'set y to ()',
        ifonedgebounce: 'if on edge bounce',
        xpos: 'x position',
        ypos: 'y position',
        direction: 'direction',
        setrotationstyle: 'set rotation style [ v]',
        
        // LOOKS
        sayforsecs: 'say () for () secs',
        say: 'say ()',
        thinkforsecs: 'think () for () secs',
        think: 'think ()',
        switchcostume: 'switch costume to ( v)',
        nextcostume: 'next costume',
        switchbackdrop: 'switch backdrop to ( v)',
        switchbackdropandwait: 'switch backdrop to ( v) and wait',
        nextbackdrop: 'next backdrop',
        changesize: 'change size by ()',
        setsize: 'set size to ()',
        changeeffect: 'change [ v] effect by ()',
        seteffect: 'set [ v] effect to ()',
        cleargraphiceffects: 'clear graphic effects',
        show: 'show',
        hide: 'hide',
        gotofrontback: 'go to [ v] layer',
        goforwardbackwardlayers: 'go [ v] () layers',
        costumenumbername: 'costume [ v]',
        backdropnumbername: 'backdrop [ v]',
        size: 'size',
        
        // SOUNDS
        playsounduntildone: 'play sound ( v) until done',
        startsound: 'start sound ( v)',
        stopallsounds: 'stop all sounds',
        changesoundeffect: 'change [ v] effect by () ::sound',
        setsoundeffect: 'set [ v] effect to () ::sound',
        clearsoundeffects: 'clear sound effects',
        changevolume: 'change volume by ()',
        setvolume: 'set volume to ()',
        volume: 'volume',
    
        // CONTROL
        wait: 'wait () secs',
        repeat: 'repeat ()',
        repeatuntil: 'repeat until <>',
        while: 'while <> {\n} ::control',
        if: 'if <> then',
        ifelse: 'if <> then {\n} else {\n} ::control', 
        forever: 'forever',
        waituntil: 'wait until <>',
        whenstartasclone: 'when I start as a clone',
        createclone: 'create clone of ( v)',
        deletethisclone: 'delete this clone',
        getcounter: 'counter ::control reporter',
        incrementcounter: 'increment counter ::control',
        clearcounter: 'clear counter ::control',

        //EVENTS
        whengreenflagclicked: 'when green flag clicked',
        whenkeypressed: 'when [ v] key pressed',
        whenthisspriteclicked: 'when this sprite clicked',
        whenthisspritetouches: 'when this sprite touches ( v) ::events hat',
        whenbackdropswitchesto: 'when backdrop switches to [ v]',
        whengreaterthan: 'when [ v] > ()',
        whenmessagereceived: 'when I receive [ v]',
        broadcast: 'broadcast ( v)',
        broadcastandwait: 'broadcast ( v) and wait',

        //SENSING
        istouching: 'touching ( v)?',
        istouchingcolor: 'touching (#ff0000)?',
        iscolortouchingcolor: 'color (#00ff00) is touching (#0000ff)?',
        distanceto: 'distance to ( v)',
        ask: 'ask () and wait',
        answer: 'answer',
        iskeypressed: 'key ( v) pressed?',
        ismousedown: 'mouse down?',
        mousex: 'mouse x',
        mousey: 'mouse y',
        setdragmode: 'set drag mode [ v]',
        loudness: 'loudness',
        timer: 'timer',
        resettimer: 'reset timer',
        propertyof: '[ v] of ( v)',
        currentdate: 'current [ v]',
        dayssince2000: 'days since 2000',
        username: 'username',
        isloud: 'loud? ::sensing',

        // OPERATORS
        "+": '() + ()',
        "-": '() - ()',
        "*": '() * ()',
        "/": '() / ()',
        pickrandom: 'pick random () to ()',
        ">": '() > ()',
        "<": '() \\< ()',
        "=": '() = ()',
        and: '<> and <>',
        or: '<> or <>',
        not: 'not <>',
        join: 'join () ()',
        letterof: 'letter () of ()',
        length: 'length of ()',
        contains: '() contains ()',
        mod: '() mod ()',
        round: 'round ()',
        math: '[ v] of () ::operators',

        // DATA
        setvar: 'set [ v] to ()',
        changevar: 'change [ v] by ()',
        showvar: 'show variable [ v]',
        hidevar: 'hide variable [ v]',
    
        // DATA â€” LISTS
        addtolist: 'add () to [ v]',
        deletefromlist: 'delete () of [ v]',
        deletealloflist: 'delete all of [ v]',
        insertinlist: 'insert () at () of [ v]',
        replaceinlist: 'replace item () of [ v] with ()',
        itemoflist: 'item () of [ v]',
        itemnumoflist: 'item # of () in [ v]',
        lengthoflist: 'length of [ v]',
        listcontains: '[ v] contains ()',

        // PEN
        eraseall: 'erase all',
        stamp: 'stamp',
        pendown: 'pen down',
        penup: 'pen up',
        setpencolor: 'set pen color to ()',
        changepencolorproperty: 'change pen ( v) by ()',
        setpencolorproperty: 'set pen ( v) to ()',
        changepensize: 'change pen size by ()',
        setpensize: 'set pen size to ()',
        setpenshade: 'change pen shade by ()',
        changepenshade: 'set pen shade to ()',
    }
}